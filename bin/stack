#!/usr/bin/env python3

import os
import sys

import yaml
from deepmerge import always_merger

os.chdir(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def load(file: str):
    with open(file) as stream:
        return yaml.load(stream.read(), Loader=yaml.FullLoader)


def merge(a, b):
    return always_merger.merge(a, b)


services = load("services.yaml")

networks = {
    "internal": {
        "name": "internal",
        "ipam": {
            "driver": "default",
            "config": [
                {
                    "subnet": "$STACK_SUBNET"
                }
            ]
        }
    }
}

volumes = {}

# generate stack compose file
for name, overrides in services.items():
    dirname = name.replace("-", "/")

    services[name] = {
        "build": {
            "context": dirname,
        },
        "container_name": name,
        "domainname": "$STACK_DOMAIN",
        "hostname": name,
        "image": "$STACK_DOMAIN/{}".format(name),
        "labels": {
            "stack.domain": "$STACK_DOMAIN",
            "stack.service": name,
        },
        "restart": "always",
        "volumes": [],
    }

    services[name] = merge(services[name], load(
        "{}/service.yaml".format(dirname)))

    if overrides is not None:
        services[name] = merge(services[name], overrides)

    for volume in services[name]["volumes"]:
        if type(volume) is str:
            continue

        if volume["type"] != "volume":
            continue

        volume["source"] = "{}_{}".format(name, volume["source"])

        volumes[volume["source"]] = {
            "name": volume["source"],
        }

with open("stack.yaml", "w") as file:
    file.write(yaml.dump({
        "version": "3.7",
        "services": services,
        "volumes": volumes,
        "networks": networks,
    }))

os.execvp("docker-compose", [
    "docker-compose",
    "-f", "stack.yaml",
] + sys.argv[1:])
